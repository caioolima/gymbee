generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TRAINER
}

enum GoalType {
  LOSE_WEIGHT
  GAIN_MASS
  IMPROVE_CONDITIONING
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SwipeAction {
  LIKE
  SKIP
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  username     String   @unique
  birthDate    DateTime
  email        String   @unique
  passwordHash String
  gender       String
  role         Role
  cpf          String  @unique
  trainer      Trainer?
  goals        UserGoal[]
  swipes       TrainerSwipe[]
  contracts    Contract[]
  checkIns     GymCheckIn[]
  createdAt    DateTime @default(now())
}

model Trainer {
  id          String   @id @default(uuid())
  cref        String   @unique
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  services    Service[]
  schedules   Schedule[]
  swipes      TrainerSwipe[]
  contracts   Contract[]
  createdAt   DateTime @default(now())
}

model UserGoal {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  goalType          GoalType
  currentWeight     Float
  targetWeight      Float
  height            Float
  activityLevel     ActivityLevel
  deadline          DateTime
  experienceLevel   ExperienceLevel
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Service {
  id          String     @id @default(uuid())
  trainerId   String
  trainer     Trainer    @relation(fields: [trainerId], references: [id])
  name        String
  description String
  price       Float
  duration    Int        // em minutos
  contracts   Contract[]
  createdAt   DateTime   @default(now())
}

model Schedule {
  id        String   @id @default(uuid())
  trainerId String
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  date      DateTime
  startTime String
  endTime   String
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
}

model TrainerSwipe {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  trainerId String
  trainer   Trainer    @relation(fields: [trainerId], references: [id])
  action    SwipeAction
  createdAt DateTime   @default(now())
}

model Contract {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  trainerId   String
  trainer     Trainer       @relation(fields: [trainerId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  status      ContractStatus
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Gym {
  id          String        @id @default(uuid())
  name        String
  address     String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  checkIns    GymCheckIn[]
  createdAt   DateTime      @default(now())
}

model GymCheckIn {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  gymId     String
  gym       Gym      @relation(fields: [gymId], references: [id])
  checkInAt DateTime @default(now())
}

model WorkoutRanking {
  id          String   @id @default(uuid())
  name        String
  description String
  dayOfWeek   Int      // 0-6 (domingo-s√°bado)
  votes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Article {
  id          String   @id @default(uuid())
  title       String
  content     String
  author      String
  category    String
  tags        String[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
}

model Challenge {
  id          String   @id @default(uuid())
  title       String
  description String
  duration    Int      // em minutos
  difficulty  String
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
}
