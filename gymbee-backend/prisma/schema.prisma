generator client {
  provider = "prisma-client-js"
}

generator seed {
  provider = "ts-node"
  output   = "./seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TRAINER
}

enum GoalType {
  LOSE_WEIGHT
  GAIN_MASS
  IMPROVE_CONDITIONING
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SwipeAction {
  LIKE
  SKIP
}

enum ContractStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum WorkoutType {
  STRENGTH
  CARDIO
  FLEXIBILITY
  MIXED
}

enum AchievementType {
  WELCOME_TO_HIVE
  FIRST_WORKOUT
  WEEK_STREAK
  MONTH_STREAK
  WEIGHT_GOAL
  CONSISTENCY
  MILESTONE
}

model User {
  id           String   @id @default(uuid())
  fullName     String
  username     String   @unique
  birthDate    DateTime
  email        String   @unique
  passwordHash String
  gender       String
  role         Role
  cpf          String  @unique
  phone        String?
  trainer      Trainer?
  goals        UserGoal[]
  swipes       TrainerSwipe[]
  contracts    Contract[]
  checkIns     GymCheckIn[]
  workouts     Workout[]
  achievements UserAchievement[]
  weightEntries WeightEntry[]
  dailyChallenges DailyChallenge[]
  createdAt    DateTime @default(now())
}

model Trainer {
  id          String   @id @default(uuid())
  cref        String   @unique
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  services    Service[]
  schedules   Schedule[]
  swipes      TrainerSwipe[]
  contracts   Contract[]
  createdAt   DateTime @default(now())
}

model UserGoal {
  id                String         @id @default(uuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  goalType          GoalType
  currentWeight     Float
  targetWeight      Float
  height            Float
  activityLevel     ActivityLevel
  deadline          DateTime?
  experienceLevel   ExperienceLevel
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model Challenge {
  id          String    @id @default(uuid())
  title       String
  description String
  goalType    GoalType  // Tipo de objetivo que o desafio é direcionado
  points      Int       @default(10) // Pontos que o usuário ganha ao completar
  duration    Int       @default(7) // Duração em dias
  difficulty  String    @default("MEDIUM") // EASY, MEDIUM, HARD
  category    String    @default("GENERAL") // Categoria do desafio
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relações
  dailyChallenges DailyChallenge[]

  @@unique([title, goalType])
}


model DailyChallenge {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  challengeId String
  challenge   Challenge  @relation(fields: [challengeId], references: [id])
  date        DateTime   @default(now())
  isAccepted  Boolean    @default(false)
  isCompleted Boolean    @default(false)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, date])
  @@index([userId, date])
}

model Service {
  id          String     @id @default(uuid())
  trainerId   String
  trainer     Trainer    @relation(fields: [trainerId], references: [id])
  name        String
  description String
  price       Float
  duration    Int        // em minutos
  contracts   Contract[]
  createdAt   DateTime   @default(now())
}

model Schedule {
  id        String   @id @default(uuid())
  trainerId String
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  date      DateTime
  startTime String
  endTime   String
  isAvailable Boolean @default(true)
  createdAt DateTime @default(now())
}

model TrainerSwipe {
  id        String     @id @default(uuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  trainerId String
  trainer   Trainer    @relation(fields: [trainerId], references: [id])
  action    SwipeAction
  createdAt DateTime   @default(now())
}

model Contract {
  id          String        @id @default(uuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  trainerId   String
  trainer     Trainer       @relation(fields: [trainerId], references: [id])
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  status      ContractStatus
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Gym {
  id          String        @id @default(uuid())
  name        String
  address     String
  latitude    Float
  longitude   Float
  phone       String?
  website     String?
  checkIns    GymCheckIn[]
  createdAt   DateTime      @default(now())
}

model GymCheckIn {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  gymId     String
  gym       Gym      @relation(fields: [gymId], references: [id])
  checkInAt DateTime @default(now())
}

model WorkoutRanking {
  id          String   @id @default(uuid())
  name        String
  description String
  dayOfWeek   Int      // 0-6 (domingo-sábado)
  votes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Article {
  id          String   @id @default(uuid())
  title       String
  content     String
  author      String
  category    String
  tags        String[]
  views       Int      @default(0)
  createdAt   DateTime @default(now())
}



model Workout {
  id            String     @id @default(uuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  type          WorkoutType
  name          String
  description   String?
  duration      Int        // em minutos
  calories      Int?       // calorias queimadas estimadas
  exercises     Json?      // lista de exercícios (flexível)
  notes         String?    // observações do usuário
  scheduledDate DateTime?  // data agendada para o treino (opcional)
  isCompleted   Boolean    @default(false) // se o treino foi realizado
  completedAt   DateTime?  // quando foi marcado como completo
  source        String     @default("user-created") // origem do treino: "template" ou "user-created"
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model UserAchievement {
  id            String         @id @default(uuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  type          AchievementType
  title         String
  description   String
  icon          String?        // nome do ícone
  unlockedAt    DateTime       @default(now())
  isRead        Boolean        @default(false)
  metadata      Json?          // dados extras (ex: valor da conquista)
}

model WeightEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  weight    Float    // peso em kg
  notes     String?  // observações opcionais
  createdAt DateTime @default(now())
}
